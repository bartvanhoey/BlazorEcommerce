@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="dropdown">
    <button @onclick="ToggleUserMenu" @onfocusout="HideUserMenu" class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a class="dropdown-item" href="profile">Profile</a>
                <a class="dropdown-item" href="orders">Orders</a>
                <hr>
                <button class="dropdown-item" @onclick="LogoutAsync">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a class="dropdown-item" href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)">Login</a>
                <a class="dropdown-item" href="register">Register</a>
            </NotAuthorized>
        </AuthorizeView>

    </div>
</div>

@code {
    private bool ShowUserMenu = false;


    private string? UserMenuCssClass => ShowUserMenu ? "show-menu" : null;

    private void ToggleUserMenu() => ShowUserMenu = !ShowUserMenu;

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        ShowUserMenu = false;
    }

    private async Task LogoutAsync()
    {

        await LocalStorage.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCountAsync();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager!.NavigateTo("/", false);
    }

}